# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.9.2
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3.8' # 确保使用 Docker Compose V2 兼容版本

# --- 可复用的配置块 (Anchors) ---
x-airflow-common:
  &airflow-common
  # 通用镜像或构建配置
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
  # build: . # 如果您想基于本地 Dockerfile 构建自定义 Airflow 镜像，请取消注释并配置 context 和 dockerfile

  # 通用环境变量 (引用另一个锚点)
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # 优化 Scheduler 扫描/解析 DAG 文件的频率 (如果 DAGs 变化不频繁)
    AIRFLOW__CORE__DAG_DIR_LIST_INTERVAL: 300 # 每 5 分钟扫描一次
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 300 # 每 5 分钟重新处理一次文件
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

  # 通用卷挂载 (引用另一个锚点) - AIRFLOW_PROJ_DIR 的使用方式保持不变
  volumes: &airflow-common-volumes
    - airflow-dags:/opt/airflow/dags # 使用命名卷
    - airflow-logs:/opt/airflow/logs # 使用命名卷
    - airflow-config:/opt/airflow/config # 使用命名卷
    - airflow-plugins:/opt/airflow/plugins # 使用命名卷
    - /var/run/docker.sock:/var/run/docker.sock # <-- **Docker Socket 挂载已加入**

  user: &airflow-common-user
    "${AIRFLOW_UID:-50000}:0"

  group_add: # List of additional GIDs
        - 989     # Your host's Docker group GID

  # 通用网络设置 (直接包含在 common 锚点中)
  networks: &airflow-common-network
    - airflow_network

  # 通用依赖项 (引用另一个锚点)
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

# --- 服务定义 (Services) ---
services:
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data # 使用命名卷
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow_network # 连接到 Airflow 网络

  redis:
    image: redis:7.2-bookworm
    container_name: airflow_redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow_network # 连接到 Airflow 网络

  airflow-webserver:
    <<: *airflow-common # 继承通用配置
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8000:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common # 继承通用配置
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common # 继承通用配置
    container_name: airflow_worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment: # worker 有额外的环境变量，所以这里需要重新定义并合并 common-env
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0" # Required for warm shutdown of celery workers
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common # 继承通用配置
    container_name: airflow_triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    # airflow-init 不应该继承 docker.sock mount，因为它不需要与 docker daemon 交互
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "    https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0" # airflow-init 通常以 root 运行以执行 chown 等操作
    volumes: # airflow-init 只需要挂载项目目录，不需要 docker.sock
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - airflow_network # 连接到 Airflow 网络
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  airflow-cli:
    <<: *airflow-common # 继承通用配置 (包括 docker.sock for CLI commands)
    container_name: airflow_cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common # 继承通用配置
    container_name: airflow_flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # --- 您的自定义 Python 环境服务 (python_env_common) ---
  python_env_common:
    image: python_env_common:202507 # 使用您提供的镜像名称
    container_name: python_env_service # 使用 python_env_service 作为容器名，与 DAG 中调用一致
    command: tail -f /dev/null # 保持容器持续运行
    volumes:
      - ./00_projects:/app/projects # 挂载您的项目代码目录
    networks:
      - airflow_network # 确保它与 Airflow 其他服务在同一网络

# --- 网络定义 (Networks) ---
networks:
  airflow_network: # 自定义 Airflow 网络
    #driver: bridge # 桥接模式是默认的，可省略

# --- 命名卷定义 (Volumes) ---
volumes:
  # PostgreSQL 数据库持久化卷
  postgres-db-volume:

  # Airflow 各个模块的绑定挂载卷 (使用 driver: local 明确定义)
  # 这些卷将您的本地文件系统目录绑定到容器中，使用 AIRFLOW_PROJ_DIR
  airflow-dags:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AIRFLOW_PROJ_DIR:-.}/dags
  airflow-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AIRFLOW_PROJ_DIR:-.}/logs
  airflow-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AIRFLOW_PROJ_DIR:-.}/config
  airflow-plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AIRFLOW_PROJ_DIR:-.}/plugins

